package org.amm.euler.p100;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.math.BigInteger;


public class Problem_13 {

	
	public static void solution_0() {
		long start = System.currentTimeMillis();
		BufferedReader in = null;
		BigInteger result = new BigInteger("0");
		try {
			in = new BufferedReader(new FileReader("number.txt"));
			for (int i=1;i<=100;i++) {
				BigInteger b = new BigInteger(in.readLine());
				result = result.add(b);
							
			}
		}
		catch ( IOException e ) { 
			  System.err.println( "Error reading file!" ); 
			} 
			finally { 
			  try { in.close(); } catch ( Exception e ) { } 
			}
		String res = result.toString().substring(0, 10);
		long end = System.currentTimeMillis();
		System.out.println("Total Time equals " + (end-start) + " ms");
		System.out.println(res);

	}

}

//import java.math.BigDecimal;
// import java.util.Scanner;
// import java.io.File;
// import java.io.IOException;
//public class Digit {
//
//    public static void main(String[] args) throws IOException {
//    	double startTime = System.nanoTime();
//		BigDecimal[] nums = new BigDecimal[100];
//		File file = new File("C:\\Users\\Umut\\Desktop\\numb.txt");//Path
//		Scanner scan = new Scanner (file);
//		BigDecimal sum = BigDecimal.ZERO;
//
//		for (int i=0;i<100;i++) {
//			nums[i] = new BigDecimal (scan.nextLine());
//			sum = sum.add(nums[i]);
//		}
//
//		for (int i=0;i<10;i++)
//			System.out.print(sum.toString().charAt(i));
//
//		double endTime = System.nanoTime();
//		double time = endTime-startTime;
//		System.out.print("\n" + time/1000000 + "ms" );
//    }
//}
//
//public static String P13(){
//        
//        BigInteger sum = BigInteger.ZERO;
//        String number = "3710728753390210279879799822083759024651013574025046376937677490009712648124896970078050417018260538743249861995247410594742333095130581237266173096299194221336357416157252243056330181107240615490825023067588207539346171171980310421047513778063246676892616706966236338201363784183836841787343617267572811287981284997940806548193159262169127588983273844274228917432520321923589422876796487670272189318474514457360013064390911672168568445887116031532767038648610584302543993961982891759366568675793495162176457141856560629502157223196586755079324193331649063524627419049291014324458138226633479447581789257586771833721766196375159057923972824559883840758203565325359399008402633568948830189458628227828801811993848262820142781941399405675871511700943903539866437282711265382998724078447305319010429358686515506006295864861532075273371959191420517255829716938887077154664991155934876035329217149700569385437007057682668462462149565007647178729443837760453282654108756828443191190634694037855217779295
//1453612327252500029607107508256381565671088525835072145876576172410976447339110607218265236877223636045174237069058518606604482076212098132878607339694128114266041808683061932846081119106155694051268969251934325451728388641918047049293215058642563049483624672216484350762017279180399446930047329563406911573244438690812579451408905770622942919710792820955037687525678773091862540744969844508330393682126183363848253301546861961243487676812975343759465158038628759287849020152168555482871720121925776695478182833757993103614740356856449095527097864797581167263201004368978425535399209318374414978068609844840309812907779179908821879532736447567559084803087086987551392711854517078544161852424320693150332599594068957565367821070749269665376763262354472106979395067965269474259770973916669376304263398708541052684708299085211399427365734116182760315001271653786073615010808570091499395125570281987460043753582903531743471732693212357815498262974255273730794953759765105305946966067683156574377167401875275889028025717332296191
//7666871381993181104877019027125267680276078003013678680992525463401061632866526362702185404977055856299465806362379931407462559622407448690823117497779236546625724692332281091714191430288197103288597806669760892938638285025333403344130655780161278159218150055618688364684200904702305308117281643048762379196984248725503663878458311487696932154902810424020138335124462181441773470637832994906362596664985876182212252255124867645336772018697169854431241957240991395900895231005882295548255300263520781532296796249481641953868218774760853271322857231104248034561248676970645079952363777424253541129168427686553892620502491032657296723701913275725675285653248258265463092207058596522297988602722583319131263751473419948895347657455011849570145487928898485682772607771372140379887971538298203783031473527721580348144513491373226651381348295438291999181802789165224310273922511228695394095795306640523263253804410005965493915987959363529746152185502371307642255121183693803580388584903416981162220729771861582366784246891579935329
//6192262467957194401269043877107275048102390895523597457231897067725479150615055049539229795309011299675198618808822587531452958409925120382900940777077567211306739708304724483816533873502340845647058077308829591747671403631980081871290118754913105471265819762333104481838626951545633492636657289756340050042846280183517070527831839425882145521227251250327551216035469812005817621652128276527516912968977893223819573432933994643750190783694576588335239988675506164965184775180738168837861091527357929701337621778427521926234019423996391680449839931733127313292418570714734956691667468763466091503591467750499518671430235219628894890102423325116913619626622732674608005915474718307983928685352069469445407247684182252467441716151403642798227334805555621481897142617910342598647204516893989422179826088076852877836461827993463137677543078093633330189826420901084880252167467088321512018588354322381287695278671329612474782464538636993009049310363619763878039621840735723997942234062353938083396513274080111166662789198148808779
//7941876876144230030984490851411606618262936828367647447792391803351109890697907148578694408955299065364044742557608365997664579509666024396409905389607120198219976047599490197230297649139826800329731560371200413779037855660850892521673093931987275027546890690370753941304265231501194809377245048795150954100921645863754710598436791786391670211874924319957006419179697775990283006991536871371193661495281130587638027841075444973307840789923115535562561142322423255033685442488917353448899115014406480203690680639606723221932041495354150312888033953605329934036800697771065056663195481234880673210146739058568557934581403627822703280826165707739483275922328459417065250945123252306082291880205877731971983945018088807242966198081119777158542502016545090413245809786882778948721859617721078384350691861554356628840622574736922845095162084960398013400172393067166682355524525280460972253503534226472524250874054075591789781264330331690";
//        for(int i = 0;i<5000;i+=50){
//            s = number.substring(i, i+50);
//            BigInteger tmp = new BigInteger(s);
//            System.out.println("\n"+s);
//            sum = sum.add(tmp);            
//        }
//        return sum.toString().substring(0,10);
//        
//    }
//	